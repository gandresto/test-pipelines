{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "enviorment": {
      "type": "string",
      // "allowedValues": [
      //   "dev",
      //   "pprd",
      //   "prod"
      // ],
      "metadata": {
        "description": "Entorno de desarrollo del bot. dev - desarrollo, pprd - preproducción, prod - producción"
      }
    },
    "org": {
      "type": "string",
      "metadata": {
        "description": "Código de la organización en la cuál se montará el bot, por ejemplo sld para TecSalud o mil para TecMilenio"
      }
    },
    "appId": {
      "type": "string",
      "metadata": {
        "description": "Active Directory App ID, set as MicrosoftAppId in the Web App's Application Settings."
      }
    },
    "chatbotWebAppSecret": {
      "type": "string",
      "metadata": {
        "description": "Active Directory App Password, set as MicrosoftAppPassword in the Web App's Application Settings. Defaults to \"\"."
      }
    },
    "useCosmosDb": {
      "type": "bool",
      "defaultValue": true
    },
    "useAppInsights": {
      "type": "bool",
      "defaultValue": true
    },
    "botId": {
      "type": "string",
      "metadata": {
        "description": "The globally unique and immutable bot ID. Also used to configure the displayName of the bot, which is mutable."
      }
    },
    "botSku": {
      "defaultValue": "F0",
      "type": "string",
      "metadata": {
        "description": "The pricing tier of the Bot Service Registration. Acceptable values are F0 and S1."
      }
    },
    "chatbotAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "name": "S1",
        "tier": "Standard",
        "size": "S1",
        "family": "S",
        "capacity": 1
      },
      "metadata": {
        "description": "The SKU of the App Service Plan. Defaults to Standard values."
      }
    },
    "appServicePlanLocation": {
      "type": "string",
      "metadata": {
        "description": "The location of the App Service Plan."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "appInsightsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "useStorage": {
      "type": "bool",
      "defaultValue": true
    },
    "luisServiceAuthoringSku": {
      "type": "string",
      "defaultValue": "F0"
    },
    "luisServiceRunTimeSku": {
      "type": "string",
      "defaultValue": "S0"
    },
    "luisServiceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "qnaAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "name": "S1",
        "tier": "Standard",
        "size": "S1",
        "family": "S",
        "capacity": 1
      }
    },
    "apiSKU": {
      "type": "object",
      "defaultValue": {
        "name": "F1",
        "tier": "Free",
        "size": "F1",
        "family": "F",
        "capacity": 0
      }
    },
    "sqlSKU": {
      "type": "object",
      "defaultValue": {
        "name": "GP_S_Gen5",
        "tier": "GeneralPurpose",
        "family": "Gen5",
        "capacity": 1
      }
    },
    "pythonFnAppServicePlanSku": {
      "type": "object"
    }
  },
  "variables": {
    "appServicePlanChatBotName": "[concat('asp-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "appServicePlanApi": "[concat('asp-api-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "appServiceApi": "[concat('api-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "appServiceChatBotName": "[concat('chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "appInsightsChatBotName": "[concat('chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "qnaChatbotName": "[concat('qna-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "qnaSearchServiceName": "[toLower(take(replace(replace(concat('qna0srch0serv0', parameters('org'), '0', parameters('enviorment')), '-', '0'), '_', '0'), 24))]",
    "cosmosDBChatBotName": "[toLower(take(replace(concat('cosmos-chbot-', parameters('org'), '-', parameters('enviorment')), '_', ''), 31))]",
    "luisServiceName": "[concat('luis-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "luisAuthoringName": "[concat('luis-chbot-', parameters('org'), '-', parameters('enviorment'), '-auth')]",
    // "luisAuthoringKey": "[concat('luis-chbot', parameters('org'), '-', parameters('enviorment'), '-auth')]",
    "stgAccChatbotName": "[toLower(take(replace(replace(concat('stg0chbot0', parameters('org'), '0', parameters('enviorment')), '-', '0'), '_', '0'), 24))]",
    "pythonAzFnName": "[concat('azfnpy-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "pythonFnAppServicePlan": "[concat('asp-azfnpy-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "pythonAzFnTelemName": "[concat('azfnpy-chbott-', parameters('org'), '-', parameters('enviorment'))]",
    "pythonFnStorageAccount": "[toLower(take(replace(replace(concat('stg0pyfn0', parameters('org'), '0', parameters('enviorment')), '-', '0'), '_', '0'), 24))]",
    "workspaceName": "[concat('wkspace-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "workspaceAnalyticsFunctions": "[concat('wksalyt-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "keyvaultName": "[toLower(take(replace(replace(concat('keyvault0chbot0', parameters('org'), '0', parameters('enviorment')), '-', '0'), '_', '0'), 24))]",
    "resourcesLocation": "[parameters('appServicePlanLocation')]",
    "siteHost": "[concat(variables('appServiceChatBotName'), '.azurewebsites.net')]",
    "botEndpoint": "[concat('https://', variables('siteHost'), '/api/messages')]",
    "qnaAppServicePlan": "[concat('asp-', variables('qnaChatbotName'))]",
    "sqlServerName": "[concat('sql-srv-chbot-', parameters('org'), '-', parameters('enviorment'))]",
    "sqlServerStgAccName": "[toLower(take(replace(replace(concat('sql0srv0', parameters('org'), '0', parameters('enviorment')), '-', '0'), '_', '0'), 24))]"
  },
  "resources": [
    {
      "apiVersion": "2018-05-01",
      "name": "1d41002f-62a1-49f3-bd43-2f3f32a19cbb",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "comments": "Create a new App Service Plan if no existing App Service Plan name was passed in.",
      "type": "Microsoft.Web/serverfarms",
      "name": "[variables('appServicePlanChatBotName')]",
      "apiVersion": "2018-02-01",
      "location": "[variables('resourcesLocation')]",
      "sku": "[parameters('chatbotAppServicePlanSku')]",
      "properties": {
        "name": "[variables('appServicePlanChatBotName')]"
      }
    },
    {
      "comments": "Create a Web App using an App Service Plan",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2015-08-01",
      "location": "[variables('resourcesLocation')]",
      "kind": "app",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanChatBotName'))]"
      ],
      "name": "[variables('appServiceChatBotName')]",
      "properties": {
        "name": "[variables('appServiceChatBotName')]",
        "serverFarmId": "[variables('appServicePlanChatBotName')]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            },
            {
              "name": "MicrosoftAppId",
              "value": "[parameters('appId')]"
            },
            {
              "name": "MicrosoftAppPassword",
              "value": "[parameters('chatbotWebAppSecret')]"
            }
          ],
          "cors": {
            "allowedOrigins": [
              "https://botservice.hosting.portal.azure.net",
              "https://hosting.onecloud.azure-test.net/"
            ]
          }
        }
      }
    },
    {
      "comments": "CosmosDB for bot state.",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "kind": "GlobalDocumentDB",
      "apiVersion": "2015-04-08",
      "name": "[variables('cosmosDBChatBotName')]",
      "location": "[parameters('location')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0
          }
        ]
      },
      "condition": "[parameters('useCosmosDb')]"
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(variables('cosmosDBChatBotName'), '/botstate-db')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBChatBotName'))]"
      ],
      "properties": {
        "resource": {
          "id": "botstate-db"
        },
        "options": {}
      },
      "condition": "[parameters('useCosmosDb')]"
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(variables('cosmosDBChatBotName'), '/botstate-db/botstate-container')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDBChatBotName'), 'botstate-db')]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBChatBotName'))]"
      ],
      "properties": {
        "resource": {
          "id": "botstate-container",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        },
        "options": {}
      },
      "condition": "[parameters('useCosmosDb')]"
    },
    {
      "apiVersion": "2017-12-01",
      "type": "Microsoft.BotService/botServices",
      "name": "[variables('appServiceChatBotName')]",
      "location": "global",
      "kind": "bot",
      "sku": {
        "name": "[parameters('botSku')]"
      },
      "properties": {
        "name": "[variables('appServiceChatBotName')]",
        "displayName": "[parameters('botId')]",
        "endpoint": "[variables('botEndpoint')]",
        "msaAppId": "[parameters('appId')]",
        "developerAppInsightsApplicationId": null,
        "developerAppInsightKey": null,
        "publishingCredentials": null,
        "storageResourceId": null
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('appServiceChatBotName'))]"
      ]
    },
    {
      "comments": "app insights",
      "type": "Microsoft.Insights/components",
      "kind": "web",
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsightsChatBotName')]",
      "location": "[parameters('appInsightsLocation')]",
      "properties": {
        "Application_Type": "web"
      },
      "condition": "[parameters('useAppInsights')]"
    },
    {
      "comments": "storage account",
      "type": "Microsoft.Storage/storageAccounts",
      "kind": "StorageV2",
      "apiVersion": "2018-07-01",
      "name": "[variables('stgAccChatbotName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "condition": "[parameters('useStorage')]"
    },
    {
      "comments": "Cognitive service authoring key for all LUIS apps.",
      "apiVersion": "2017-04-18",
      "name": "[variables('luisAuthoringName')]",
      "location": "[parameters('luisServiceLocation')]",
      "type": "Microsoft.CognitiveServices/accounts",
      "kind": "LUIS.Authoring",
      "sku": {
        "name": "[parameters('luisServiceAuthoringSku')]"
      },
      "properties": {
        "statisticsEnabled": false
      }
    },
    {
      "comments": "Cognitive service endpoint key for all LUIS apps.",
      "type": "Microsoft.CognitiveServices/accounts",
      "kind": "LUIS",
      "apiVersion": "2017-04-18",
      "name": "[variables('luisServiceName')]",
      "location": "[parameters('luisServiceLocation')]",
      "sku": {
        "name": "[parameters('luisServiceRunTimeSku')]"
      },
      "properties": {
        "statisticsEnabled": false
      }
    },

    // QnA
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('qnaChatbotName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "S0"
      },
      "kind": "QnAMaker",
      "properties": {
        "apiProperties": {
          "qnaRuntimeEndpoint": "[concat('https://', variables('qnaChatbotName'), '.azurewebsites.net')]"
        },
        "customSubDomainName": "[variables('qnaChatbotName')]",
        "privateEndpointConnections": [],
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('qnaChatbotName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "IngestionMode": "ApplicationInsights",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('qnaAppServicePlan')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('qnaAppServicePlanSku').name]",
        "tier": "[parameters('qnaAppServicePlanSku').tier]",
        "size": "[parameters('qnaAppServicePlanSku').size]",
        "family": "[parameters('qnaAppServicePlanSku').family]",
        "capacity": "[parameters('qnaAppServicePlanSku').capacity]"
      },
      "kind": "app",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('qnaChatbotName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('qnaAppServicePlan'))]"
      ],
      "kind": "app",
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('qnaAppServicePlan'))]",
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {},
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2020-08-01",
      "name": "[variables('qnaSearchServiceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "standard"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "Default",
        "publicNetworkAccess": "Enabled",
        "networkRuleSet": {
          "ipRules": []
        }
      }
    },

    // Python azure functions
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('pythonFnStorageAccount')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },

    // Workspace analytics
    {
      "type": "Microsoft.DesktopVirtualization/workspaces",
      "apiVersion": "2021-02-01-preview",
      "name": "[variables('workspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "description": "WorksSpace para almacenamiento de telemetría del bot.",
        "friendlyName": "WorkSpaceChatBot",
        "applicationGroupReferences": []
      }
    },
    {
      "type": "microsoft.operationalinsights/workspaces",
      "apiVersion": "2020-10-01",
      "name": "[variables('workspaceAnalyticsFunctions')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30,
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {

      "type": "microsoft.insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('pythonAzFnName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('workspaceAnalyticsFunctions'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      },
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('workspaceAnalyticsFunctions'))]"
      ]
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('pythonAzFnTelemName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('workspaceAnalyticsFunctions'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      },
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('workspaceAnalyticsFunctions'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('pythonFnAppServicePlan')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('pythonFnAppServicePlanSku').name]",
        "tier": "[parameters('pythonFnAppServicePlanSku').tier]",
        "size": "[parameters('pythonFnAppServicePlanSku').size]",
        "family": "[parameters('pythonFnAppServicePlanSku').family]",
        "capacity": "[parameters('pythonFnAppServicePlanSku').capacity]"
      },
      "kind": "linux",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('pythonAzFnName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('pythonFnAppServicePlan'))]"
      ],
      "kind": "functionapp,linux",
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('pythonFnAppServicePlan'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {},
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('pythonAzFnTelemName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('pythonFnAppServicePlan'))]"
      ],
      "kind": "functionapp,linux",
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('pythonFnAppServicePlan'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {},
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('pythonAzFnName'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('pythonAzFnName'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "PYTHON|3.8",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": true
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [
            "https://functions.azure.com",
            "https://functions-staging.azure.com",
            "https://functions-next.azure.com"
          ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('pythonAzFnTelemName'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('pythonAzFnTelemName'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "PYTHON|3.8",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": true
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [
            "https://functions.azure.com",
            "https://functions-staging.azure.com",
            "https://functions-next.azure.com"
          ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('pythonAzFnName'), '/', variables('pythonAzFnName'), '.azurewebsites.net')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('pythonAzFnName'))]"
      ],
      "properties": {
        "siteName": "[variables('pythonAzFnName')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('pythonAzFnTelemName'), '/', variables('pythonAzFnTelemName'), '.azurewebsites.net')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('pythonAzFnTelemName'))]"
      ],
      "properties": {
        "siteName": "[variables('pythonAzFnTelemName')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2020-04-01-preview",
      "name": "[variables('keyvaultName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('pythonAzFnName'))]",
        "[resourceId('Microsoft.Web/sites', variables('pythonAzFnTelemName'))]",
        "[resourceId('Microsoft.Web/sites', variables('appServiceApi'))]"
      ],
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": false,
        "vaultUri": "[concat('https://', variables('keyvaultName'), '.vault.azure.net/')]",
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
        ]
      }
    },
    // API
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appServiceApi')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('workspaceAnalyticsFunctions'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('appServicePlanApi')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('apiSKU').name]",
        "tier": "[parameters('apiSKU').tier]",
        "size": "[parameters('apiSKU').size]",
        "family": "[parameters('apiSKU').family]",
        "capacity": "[parameters('apiSKU').capacity]"
      },
      "kind": "app",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('appServiceApi')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanApi'))]"
      ],
      "kind": "app",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('appServiceApi'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('appServiceApi'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanApi'))]",
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {},
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('appServiceApi'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceApi'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "phpVersion": "5.6",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "localMySqlEnabled": false,
        "managedServiceIdentityId": 9535,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('appServiceApi'), '/', variables('appServiceApi'), '.azurewebsites.net')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceApi'))]"
      ],
      "properties": {
        "siteName": "[variables('appServiceApi')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Web/sites/siteextensions",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('appServiceApi'), '/Microsoft.AspNetCore.AzureAppServices.SiteExtension')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceApi'))]"
      ]
    },

    // SQL
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2020-08-01-preview",
      "name": "[variables('sqlServerName')]",
      "location": "[parameters('location')]",
      "kind": "v12.0",
      "properties": {
        "version": "12.0",
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('sqlServerStgAccName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2020-08-01-preview",
      "name": "[concat(variables('sqlServerName'), '/', variables('sqlServerName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
      ],
      "sku": {
        "name": "[parameters('sqlSKU').name]",
        "tier": "[parameters('sqlSKU').tier]",
        "family": "[parameters('sqlSKU').family]",
        "capacity": "[parameters('sqlSKU').capacity]"
      },
      "kind": "v12.0,user,vcore,serverless",
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": 34359738368,
        "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
        "zoneRedundant": false,
        "readScale": "Disabled",
        "autoPauseDelay": 60,
        "storageAccountType": "GRS",
        "minCapacity": 0.5
      }
    }
  ],
  "outputs": {
    "ApplicationInsights": {
      "type": "object",
      "value": {
        "InstrumentationKey": "[if(parameters('useAppInsights'), reference(resourceId('Microsoft.Insights/components', variables('appInsightsChatBotName'))).InstrumentationKey, '')]"
      }
    },
    "cosmosDb": {
      "type": "object",
      "value": {
        "cosmosDBEndpoint": "[if(parameters('useCosmosDb'), reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBChatBotName'))).documentEndpoint, '')]",
        "authKey": "[if(parameters('useCosmosDb'), listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBChatBotName')), '2015-04-08').primaryMasterKey, '')]",
        "databaseId": "botstate-db",
        "containerId": "botstate-container"
      }
    },
    "blobStorage": {
      "type": "object",
      "value": {
        "connectionString": "[if(parameters('useStorage'), concat('DefaultEndpointsProtocol=https;AccountName=', variables('stgAccChatbotName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('stgAccChatbotName')), '2018-07-01').keys[0].value, ';EndpointSuffix=core.windows.net'), '')]",
        "container": "transcripts"
      }
    },
    "luis": {
      "type": "object",
      "value": {
        "endpointKey": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('luisServiceName')),'2017-04-18').key1]",
        "authoringKey": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('luisAuthoringName')),'2017-04-18').key1]",
        "region": "[parameters('luisServiceLocation')]",
        "endpoint": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('luisServiceName'))).endpoint]",
        "authoringEndpoint": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('luisAuthoringName'))).endpoint]"
      }
    }
  }
}
